#!/usr/bin/env python3
# -*- UTF-8 -*-

import argparse
import re
import os


def sanitize(infile, outfile, domain, addrformat):
    print("[+] Sanitizing {0}".format(infile))
    # Note: Add more excluded titles as required. Common IT, Infosec, and HR titles listed.
    excluded_words = ['CEH','OSCP','OSCE','GCIA','GCIH','GXPN','GPEN','GCED','GSE','CISSP',
                    'CISA','QSA','CCNA','CCNP','CCIE','MCSE','MCSA','MCP','ITIL','PMP','HRM','SHRM',
                    'SHRM-CP','SHRM-SCP','PHR','PHRca','SPHR','GPHR','HR']
    sanitized_names = []
    with open(infile, "r+") as r:
        for name in r:
            disassembled_name = ((re.findall("[\w']+", name)))
            for piece in disassembled_name:
                if piece in excluded_words:
                    disassembled_name.remove(piece)
            sanitized_name = disassembled_name[0] + " " + disassembled_name[-1]
            sanitized_names.append(sanitized_name)
    formatNames(sanitized_names, outfile, domain, addrformat)


def formatNames(sanitized_names, outfile, domain, addrformat):
    print("[+] Formatting output...")
    if addrformat == "flast":
        fmt_flast(sanitized_names, outfile, domain)

    if addrformat == "underscore":
        fmt_underscore(sanitized_names, outfile, domain)

    if addrformat == "firstlast":
        fmt_firstlast(sanitized_names, outfile, domain)

    if addrformat == "firstl":
        fmt_firstl(sanitized_names, outfile, domain)

    if addrformat == "firstonly":
        fmt_firstonly(sanitized_names, outfile, domain)

    if addrformat == "lastf":
        fmt_lastf(sanitized_names, outfile, domain)

    if addrformat == "truncated":
        fmt_truncated(sanitized_names, outfile, domain)

    if addrformat == "dot":
        fmt_dot(sanitized_names, outfile, domain)


def fmt_flast(sanitized_names, outfile, domain):
    for name in sanitized_names:
        full_name = name.split(" ")
        first_name = full_name[0]
        last_name = full_name[1]
        formatted_name = first_name[0] + last_name.strip() + "@" + domain + "\n"
        with open(outfile, "a") as completed_file:
            completed_file.write(formatted_name.lower())
    errorcheck(outfile)


def fmt_underscore(sanitized_names, outfile, domain):
    for name in sanitized_names:
        full_name = name.split(" ")
        first_name = full_name[0]
        last_name = full_name[1]
        formatted_name = first_name + "_" + last_name.strip() + "@" + domain + "\n"
        with open(outfile, "a") as completed_file:
                completed_file.write(formatted_name.lower())
    errorcheck(outfile)


def fmt_dot(sanitized_names, outfile, domain):
    for name in sanitized_names:
        full_name = name.split(" ")
        first_name = full_name[0]
        last_name = full_name[1]
        formatted_name = first_name + "." + last_name.strip() + "@" + domain + "\n"
        with open(outfile, "a") as completed_file:
                completed_file.write(formatted_name.lower())
    errorcheck(outfile)

    
def fmt_firstlast(sanitized_names, outfile, domain):
    for name in sanitized_names:
        full_name = name.split(" ")
        first_name = full_name[0]
        last_name = full_name[1]
        formatted_name = first_name.strip() + last_name.strip() + "@" + domain + "\n"
        with open(outfile, "a") as completed_file:
            completed_file.write(formatted_name.lower())
    errorcheck(outfile)


def fmt_firstl(sanitized_names, outfile, domain):
    for name in sanitized_names:
        full_name = name.split(" ")
        first_name = full_name[0]
        last_name = full_name[1]
        formatted_name = first_name + last_name[0].strip() + "@" + domain + "\n"
        with open(outfile, "a") as completed_file:
            completed_file.write(formatted_name.lower())
    errorcheck(outfile)


def fmt_lastf(sanitized_names, outfile, domain):
    for name in sanitized_names:
        full_name = name.split(" ")
        first_name = full_name[0]
        last_name = full_name[1]
        formatted_name = last_name.strip() + first_name[0].strip() + "@" + domain + "\n"
        with open(outfile, "a") as completed_file:
            completed_file.write(formatted_name.lower())
    errorcheck(outfile)


def fmt_firstonly(sanitized_names, outfile, domain):
    for name in sanitized_names:
        full_name = name.split(" ")
        first_name = full_name[0]
        formatted_name = first_name.strip() + "@" + domain + "\n"
        with open(outfile, "a") as completed_file:
            completed_file.write(formatted_name.lower())
    errorcheck(outfile)


def fmt_truncated(sanitized_names, outfile, domain):
    # Change this value to change the truncated length. John Smith with truncated=3 becomes johsmi.
    truncated = 3
    for name in sanitized_names:
        full_name = name.split(" ")
        first_name = full_name[0]
        last_name = full_name[1]
        formatted_name = first_name[:truncated].strip() \
                        + last_name[:truncated].strip() + "@" + domain + "\n"
        with open(outfile, "a") as completed_file:
            completed_file.write(formatted_name.lower())
    errorcheck(outfile)


def errorcheck(outfile):
    if os.path.exists(outfile):
        print("[+] Done! Created: {0}".format(outfile))
    else:
        print("[-] Failed to create: {0}".format(outfile))
        exit()


progdesc = """Takes a list of full names (such as a list generated by TheHarvester)
and converts them to email format, to assist in brute force or password reuse attacks during 
black-box penetration tests. Attempts to sanitize the username list by removing middle names, 
punctuation, intials, and titles from the list. Valid Formats: flast (jsmith@pwn3d.org), underscore 
(john_smith@pwn3d.org), firstlast (johnsmith@pwn3d.org), firstl (johns@pwn3d.org), firstonly 
(john@pwn3d.org), truncated (johsmi@pwn3d.org), lastf (smithj@pwn3d.org).
"""
parser = argparse.ArgumentParser(description=progdesc)
parser.add_argument('-i', metavar='InputFile', action='store', default='None', 
                    help='Ex: fullnames.txt')
parser.add_argument('-o', metavar='OutputFile', action='store', default='None', 
                    help='Ex: emails.txt')
parser.add_argument('-d', metavar='DomainName', action='store', default=
                    'Please_Specify_A_Domain_Name.thx', help='Ex: pwn3d.org')
parser.add_argument('-f', metavar='FormatChoice', action='store', default='flast', 
                    help='Valid formats: flast (*default), underscore, firstlast, firstl,\
                     firstonly, lastf, truncated, dot')
args = parser.parse_args()

if args.i:
    if os.path.exists(args.i):
        infile = args.i
    else:
        print("[-] Input file '{0}' does not exist!\n".format(args.i))
        exit()
if args.o:
    outfile = args.o
if args.d: 
    domain = args.d
if args.f:
    addrformat = args.f.lower()

try: 
    sanitize(infile, outfile, domain, addrformat)
except:
    parser.print_help()