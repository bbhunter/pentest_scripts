#!/usr/bin/env python3
#Version 1.2-20170410
# TODO: Build in checks to fix names that have titles, punctuation or more than two names.
#       Currently, names like "John Doe, MD" or "George W. Bush" and "J.D. Power" aren't 
#       converted in a clean fashion. Manual cleanup prior to running this script is recommended.

import sys
import argparse


def formatNames(infile, outfile, domain, addrformat):
    if addrformat == "flast":
        fmt_flast(infile, outfile, domain)

    if addrformat == "underscore":
        fmt_underscore(infile, outfile, domain)

    if addrformat == "firstlast":
        fmt_firstlast(infile, outfile, domain)

    if addrformat == "firstl":
        fmt_firstl(infile, outfile, domain)

    if addrformat == "firstonly":
        fmt_firstonly(infile, outfile, domain)

    if addrformat == "lastf":
        fmt_lastf(infile, outfile, domain)

    if addrformat == "truncated":
        fmt_truncated(infile, outfile, domain)


def fmt_flast(r, outfile, domain):
    with open(infile, "r+") as r:
        for name in r:
            full_name = name.split(" ")
            first_name = full_name[0]
            last_name = full_name[1]
            formatted_name = first_name[0] + last_name.strip() + "@" + domain + "\n"
            with open(outfile, "a") as completed_file:
                completed_file.write(formatted_name.lower())
    r.close()
    completed_file.close()
    print("[+] Done! Created {0}".format(outfile))


def fmt_underscore(r, outfile, domain):
    with open(infile, "r+") as r:
        for name in r:
            full_name = name.split(" ")
            first_name = full_name[0]
            last_name = full_name[1]
            formatted_name = first_name + "_" + last_name.strip() + "@" + domain + "\n"
            with open(outfile, "a") as completed_file:
                    completed_file.write(formatted_name.lower())
    r.close()
    completed_file.close()
    print("[+] Done! Created {0}".format(outfile))

    
def fmt_firstlast(r, outfile, domain):
    with open(infile, "r+") as r:
        for name in r:
            full_name = name.split(" ")
            first_name = full_name[0]
            last_name = full_name[1]
            formatted_name = first_name.strip() + last_name.strip() + "@" + domain + "\n"
            with open(outfile, "a") as completed_file:
                completed_file.write(formatted_name.lower())
    r.close()
    completed_file.close()
    print("[+] Done! Created {0}".format(outfile))    


def fmt_firstl(r, outfile, domain):
    with open(infile, "r+") as r:
        for name in r:
            full_name = name.split(" ")
            first_name = full_name[0]
            last_name = full_name[1]
            formatted_name = first_name + last_name[0].strip() + "@" + domain + "\n"
            with open(outfile, "a") as completed_file:
                completed_file.write(formatted_name.lower())
    r.close()
    completed_file.close()
    print("[+] Done! Created {0}".format(outfile)) 


def fmt_lastf(r, outfile, domain):
    with open(infile, "r+") as r:
        for name in r:
            full_name = name.split(" ")
            first_name = full_name[0]
            last_name = full_name[1]
            formatted_name = last_name.strip() + first_name[0].strip() + "@" + domain + "\n"
            with open(outfile, "a") as completed_file:
                completed_file.write(formatted_name.lower())
    r.close()
    completed_file.close()
    print("[+] Done! Created {0}".format(outfile))    


def fmt_firstonly(r, outfile, domain):
    with open(infile, "r+") as r:
        for name in r:
            full_name = name.split(" ")
            first_name = full_name[0]
            formatted_name = first_name.strip() + "@" + domain + "\n"
            with open(outfile, "a") as completed_file:
                completed_file.write(formatted_name.lower())
    r.close()
    completed_file.close()
    print("[+] Done! Created {0}".format(outfile))


def fmt_truncated(r, outfile, domain):
    # Change this value to change the truncated length. 
    truncated = 3
    with open(infile, "r+") as r:
        for name in r:
            full_name = name.split(" ")
            first_name = full_name[0]
            last_name = full_name[1]
            formatted_name = first_name[:truncated].strip() + last_name[:truncated].strip() + "@" + domain + "\n"
            with open(outfile, "a") as completed_file:
                completed_file.write(formatted_name.lower())
    r.close()
    completed_file.close()
    print("[+] Done! Created {0}".format(outfile))


progdesc = """Takes a list of full names (such as a list generated by TheHarvester)
and converts them to email format, to assist in brute force or password reuse attacks during 
black-box penetration tests. Valid Formats: flast (jsmith@pwn3d.org), underscore (john_smith@pwn3d.org), 
firstlast (johnsmith@pwn3d.org), firstl (johns@pwn3d.org), firstonly (john@pwn3d.org), truncated (johsmi@pwn3d.org)
lastf (smithj@pwn3d.org). Full example: ./generate_emails.py -i /root/recon/full_names.txt -o 
/root/recon/email_addresses_firstlast.txt -f firstlast -d pwn3d.org"""

parser = argparse.ArgumentParser(description=progdesc)
parser.add_argument('-i', metavar='InputFile', action='store', default='None', 
                    help='Ex: fullnames.txt')
parser.add_argument('-o', metavar='OutputFile', action='store', default='None', 
                    help='Ex: emails.txt')
parser.add_argument('-d', metavar='DomainName', action='store', default='Please_Specify_A_Domain_Name.thx', 
                    help='Ex: pwn3d.org')
parser.add_argument('-f', metavar='FormatChoice', action='store', default='flast', 
                    help='Valid formats: flast (*default), underscore, firstlast, firstl, firstonly, lastf')

args = parser.parse_args()

if args.i:
    infile = args.i
if args.o:
    outfile = args.o
if args.d: 
    domain = args.d.lower()
if args.f:
    addrformat = args.f.lower()

try:
    formatNames(infile, outfile, domain, addrformat)
except:
    parser.print_help()